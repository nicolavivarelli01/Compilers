import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	table = new HashMap<String, HashMap<String, Integer>>();
:};

parser code {:
	public HashMap<String, HashMap<String, Integer>> table;
	
    public void syntax_error(Symbol current_symbol) {
        StringBuffer m = new StringBuffer("Error");

        if(current_symbol.left != -1) {
            m.append(" in line " + (current_symbol.left + 1));
            m.append(" in column " + (current_symbol.right + 1));
        }
        m.append(", symbol: " + current_symbol);
        m.append(": Syntax Error");

        System.err.println(m);
    }
	
	public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if(info instanceof Symbol) {
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

    public Object stack(int position) {
        return (((Symbol) stack.elementAt(tos + position)).value);
    }
:};

action code {:

:};





//////////////////////////////////////////////////////////////////////////////////////////////////////
///// TERMINALS - EACH SYMBOL FROM THE JFLEX MUST BE HERE - INCLUDE THEM ALL
/////////////////////////////////////////////////////////////////////////////////////////////////////
terminal TOK1, TOK2, SEP, CM, QA, RO, RC, DOT, AND, OR, NOT;
terminal String QSTRING, OBJ, END, NEQU, EQU, ISTRUE, ISFALSE, PRINT,MQA, NAME;
terminal Integer UINT;
//////////////////////////////////
///// NON-TERMINALS
/////////////////////////////////

non terminal File, header, objects, queries, tok2l, object, query, print_funct, print_list_true, print_list_false;
non terminal HashMap attr_list;
non terminal Boolean bool_expr, NT0, NT1, NT2, NT3, NT4, NT5, NT6, NT7;
non terminal Integer obj_ref;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc RO, RC;

start with File;

File ::= header SEP objects SEP queries
;

tok2l ::= TOK2
        | tok2l TOK2 
;

header ::= TOK1 tok2l | tok2l TOK1 | TOK1 tok2l TOK1 tok2l | tok2l TOK1 tok2l TOK1
        | TOK1 tok2l TOK1 | tok2l TOK1 TOK1 | TOK1 TOK1 tok2l
;


objects ::= objects object object
        | object object
;

object ::= OBJ attr_list:l NAME QSTRING:obj_name END
        {:
            parser.table.put(obj_name, l);
        :}
;

attr_list ::= attr_list:l CM QSTRING:attr_name UINT:attr_value
            {:
                l.put(attr_name, attr_value);
                RESULT = l;
            
            :}
            |  QSTRING:attr_name UINT:attr_value
            {:
                HashMap<String,Integer> tab = new HashMap<String, Integer>();
                tab.put(attr_name, attr_value);
                RESULT = tab;
            
            :}
;

queries ::= 
        | queries query
;

query ::= QA bool_expr print_funct MQA
;

bool_expr ::= bool_expr:a AND bool_expr:b {: RESULT= (a && b); :}
            | bool_expr:a OR bool_expr:b {: RESULT= (a || b); :}
            | NOT bool_expr:a {: RESULT= !a; :}
            | RO bool_expr:a RC {: RESULT= (Boolean)a; :}
            | obj_ref:v1 EQU UINT:v2
            {:
                if(v1 == v2){
                    RESULT=true;
                }
                else{
                    RESULT=false;
                }
            :}
            | obj_ref:v1 NEQU UINT:v2
            {:
                if(v1 != v2){
                    RESULT=true;
                }
                else{
                    RESULT=false;
                }
            :}
;

obj_ref ::= QSTRING:obj_name DOT QSTRING:attr_name 
        {:
            HashMap<String,Integer> tab = (HashMap)parser.table.get(obj_name);
            Integer attr_value = (Integer)tab.get(attr_name);
            RESULT = attr_value;
        :}
;

print_funct ::= NT2 ISTRUE  print_list_true
              | NT5 ISFALSE print_list_false
              | NT2 ISTRUE  print_list_true  NT6 ISFALSE print_list_false
              | NT5 ISFALSE print_list_false NT7 ISTRUE  print_list_true
;

print_list_true ::= print_list_true NT1:bool_expr PRINT QSTRING:print_str 
    {:
        if(bool_expr){
            System.out.println(print_str);
        }

    :}
    |  NT0:bool_expr PRINT QSTRING:print_str 
    {:
        if(bool_expr){
            System.out.println(print_str);
        }
    :}

;

print_list_false ::= print_list_false NT4:bool_expr PRINT QSTRING:print_str 
    {:
        if(!bool_expr){
            System.out.println(print_str);
        }

    :}
    |  NT3:bool_expr PRINT QSTRING:print_str 
    {:
        if(!bool_expr){
            System.out.println(print_str);
        }
    :}

;


NT0 ::= {:RESULT = (Boolean)parser.stack(-1); :}
;

NT1 ::= {:RESULT = (Boolean)parser.stack(-2); :}
;

NT2 ::= {:RESULT = (Boolean)parser.stack(0); :}
;

NT3 ::= {:RESULT = (Boolean)parser.stack(-1); :}
;

NT4 ::= {:RESULT = (Boolean)parser.stack(-2); :}
;

NT5 ::= {:RESULT = (Boolean)parser.stack(0); :}
;

NT6 ::= {: RESULT = (Boolean)parser.stack(-3); :}
;

NT7 ::= {: RESULT = (Boolean)parser.stack(-3); :}
;
